generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                      String                 @id @default(cuid())
  name                    String?
  email                   String                 @unique
  emailVerified           DateTime?
  password                String?
  role                    UserRole               @default(USER)
  image                   String?
  isTwoFactorEnabled      Boolean                @default(false)
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  twoFactorConfirmationId String?
  accounts                Account[]
  invites                 Invite[]
  twoFactorConfirmation   TwoFactorConfirmation?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Feedback {
  id        String        @id @default(cuid())
  name      String
  email     String
  phone     String
  message   String
  userId    String?
  createdAt DateTime      @default(now())
  state     FeedbackState @default(NEW)
}

model Review {
  id        String      @id @default(cuid())
  rating    Int
  message   String
  userId    String
  createdAt DateTime    @default(now())
  state     ReviewState @default(NEW)
}

model Invite {
  id           String         @id @default(cuid())
  userId       String
  nameOne      String
  nameTwo      String
  endDate      DateTime
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  InviteWidget InviteWidget[]
}

model InviteWidget {
  id          String   @id @default(cuid())
  inviteId    String
  widgetId    String
  widgetData  Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String
  displayName String
  file        String
  name        String
  order       Int
  version     String
  invite      Invite   @relation(fields: [inviteId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
}

enum ReviewState {
  NEW
  APPROVED
  DECLINED
}

enum FeedbackState {
  NEW
  CHECKED
}
